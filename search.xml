<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[sublimetext-markdown编写数学公式]]></title>
      <url>%2F2017%2F05%2F31%2Fsublimetext-markdown%E7%BC%96%E5%86%99%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[sublimetext-markdown编写数学公式 1. 如何插入公式 1.1 行内公式 1.2 行间公式 2. 输入各种符号 2.1 上下标 2.2 括号和分隔符 2.3 输入分数 2.4 输入开方 2.5 输入省略号 2.6 输入矢量 2.7 输入积分 2.8 输入极限运算 2.9 输入累加、累乘运算 2.10 公式应用（引用？） 2.11 输入希腊字母 2.12 其它特殊字符 2.13 进行字体转换 安装一系列Markdown插件并开启Mathjax后，就可以在sublimetext中用latex语法编写数学公式了。这里把基本语法整理一下。 1. 如何插入公式LaTeX的数学公式有两张：行内公式和行间公式。行内公式与其他文字混编在一起，行间公式则单独成行。 1.1 行内公式行内公式有三种表示方法： \\(数学公式\\) 或 $数学公式$ 或 $(数学公式$) 这是一个行内公式\\(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\\) 这是一个行内公式$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$ 这是一个行内公式$(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$) 显示为这是一个行内公式\(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\) 这是一个行内公式$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$ 这是一个行内公式$(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$) 1.2 行间公式行间公式可以表示为： \\[数学公式\\] 或 $$数学公式$$ $$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$ \\[x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\\] 显示为$$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$\[x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\] 2. 输入各种符号2.1 上下标^表示上标，_ 表示下标。如果上下标的内容多于一个字符，用{}将其括起来作为一个整体。上下标可以嵌套，也可以同时使用 例如：$x^{y^z}=(1+{\rm e}^x)^{-2xy^w}$ 显示为例如：$x^{y^z}=(1+{\rm e}^x)^{-2xy^w}$ 如果要在左右两边都有上下标，可以用\sideset命令(不成功) 例子：$\sideset{^1_2}{^3_4}\bigotimes$ 显示 :$\sideset{^1_2}{^3_4}\bigotimes$ 2.2 括号和分隔符()、[]、|表示自己，{}表示{}。当要显示大号的括号或分隔符时，要使用\left和\rigth命令 例子：$f(x,y,z)=3y^2z \left(3+\frac{7x+5}{1=y^2} \right)$ 显示为$f(x,y,z)=3y^2z \left(3+\frac{7x+5}{1+y^2} \right)$ 有时候要用\left.或\right.进行匹配而不显示本身。 例子：$\left. \frac{{\rm d}u}{{\rm d}x} \right| _{x=0}$ 显示：$\left. \frac{{\rm d}u}{{\rm d}x} \right| _{x=0}$ #### 2.3 输入分数 例子：$\frac{1}{3}$ 或 $1 \over 3$ 显示：$\frac{1}{3}$ 或 $1 \over 3$ #### 2.4 输入开方 例子：$\sqrt{2}$ 和 $\sqrt[n]{3}$ 显示：$\sqrt{2}$ 和 $\sqrt[n]{3}$ #### 2.5 输入省略号 数学公式中常见的省略号有两种，\ldots表示与文本底线对齐的省略号，\cdots表示与文本中线对齐的省略号。\cdot表示一个中间的点 例子：$f(x_1,x_2,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$ 显示：$f(x_1,x_2,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$ #### 2.6 输入矢量 例子：$\vec{a} \cdot \vec{b}=0$ 显示：$\vec{a} \cdot \vec{b}=0$ #### 2.7 输入积分 例子：$\int_0^1 x^2 {\rm d}x$ 显示：$\int_0^1 x^2 {\rm d}x$ #### 2.8 输入极限运算 例子：$\lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}$ 显示：$\lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}$ #### 2.9 输入累加、累乘运算 例子：$\sum_{i=0}^n \frac{1}{i^2}$ 和 $\prod_{i=0}^n \frac{1}{i^2}$ 显示：$\sum_{i=0}^n \frac{1}{i^2}$ 和 $\prod_{i=0}^n \frac{1}{i^2}$ #### 2.10 公式应用（引用？） 先要在［mathjax］后添加： ＜script type="text/x-mathjax-config"＞ MathJax.Hub.Config({ TeX: {equationNumbers: { autoNumber: ["AMS"], useLabelIds: true}}, &quot;HTML-CSS&quot;: {linebreaks: {automatic: true}}, SVG: {linebreaks: {automatic: true}} }); ＜/script＞ 例子：$r = r_F+ \beta(r_M – r_F) + \epsilon$ 显示：$r = r_F+ \beta(r_M – r_F) + \epsilon$ 2.11 输入希腊字母例子：123456$\alpha$ $\beta$ $\gamma$ $\Gamma$ $\delta$ $\Delta$ $\epsilon$ $\varepsilon$ $\zeta$ $\eta$ $\theta$ $\Theta$ $\vartheta$ $\iota$ $\kappa$ $\lambda$ $\Lambda$ $\mu$ $\nu$ $\xi$ $\Xi$ $\pi$ $\Pi$ $\varpi$ $\rho$ $\varrho$ $\sigma$ $\Sigma$ $\varsigma$ $\tau$ $\upsilon$ $\Upsilon$ $\phi$ $\Phi$ $\varphi$ $\chi$ $\psi$ $\Psi$ $\omega$ $\Omega$ 显示 $\alpha$ $\beta$ $\gamma$ $\Gamma$ $\delta$ $\Delta$ $\epsilon$ $\varepsilon$ $\zeta$ $\eta$ $\theta$ $\Theta$ $\vartheta$ $\iota$ $\kappa$ $\lambda$ $\Lambda$ $\mu$ $\nu$$\xi$ $\Xi$ $\pi$ $\Pi$ $\varpi$ $\rho$ $\varrho$ $\sigma$ $\Sigma$ $\varsigma$ $\tau$ $\upsilon$ $\Upsilon$$\phi$ $\Phi$ $\varphi$ $\chi$ $\psi$ $\Psi$ $\omega$ $\Omega$ 2.12 其它特殊字符关系运算符：±：\pm×：\times÷：\div∣：\mid?：\nmid?：\cdot°：\circ?：\ast?：\bigodot?：\bigotimes?：\bigoplus≤：\leq≥：\geq≠：\neq≈：\approx≡：\equiv∑：\sum∏：\prod?：\coprod 集合运算符：?：\emptyset∈：\in?：\notin?：\subset?：\supset?：\subseteq?：\supseteq?：\bigcap?：\bigcup?：\bigvee?：\bigwedge?：\biguplus?：\bigsqcup 对数运算符：log：\loglg：\lgln：\ln 三角运算符：⊥：\bot∠：\angle30°：30^\circsin：\sincos：\costan：\tancot：\cotsec：\seccsc：\csc 微积分运算符：′：\prime∫：\int?：\iint?：\iiint??：\iiiint∮：\ointlim：\lim∞：\infty?：\nabla 逻辑运算符：∵：\because∴：\therefore?：\forall?：\exists≠：\not=≯：\not&gt;??：\not\subset 戴帽符号：y^：\hat{y}yˇ：\check{y}y?：\breve{y} 连线符号：a+b+c+dˉˉˉˉˉˉˉˉˉˉˉˉˉˉˉˉˉˉ：\overline{a+b+c+d}a+b+c+d??????????：\underline{a+b+c+d}a+b+c 1.0+d 2.0：\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0} 箭头符号：↑：\uparrow↓：\downarrow?：\Uparrow?：\Downarrow→：\rightarrow←：\leftarrow?：\Rightarrow?：\Leftarrow?：\longrightarrow?：\longleftarrow?：\Longrightarrow?：\Longleftarrow 要输出字符 空格 # $ % &amp; { } ，用命令： \空格 # \$ \% \&amp; \ { } 2.13 进行字体转换要对公式的某一部分字符进行字体转换，可以用{\rm 需转换的部分字符}命令，其中\rm可以参照下表选择合适的字体。一般情况下，公式默认为意大利体。\rm 罗马体 \it 意大利体\bf 黑体 \cal 花体\sl 倾斜体 \sf 等线体\mit 数学斜体 \tt 打字机字体\sc 小体大写字母]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[sublimetext-markdown实践]]></title>
      <url>%2F2017%2F05%2F31%2Fsublimetext-markdown%E5%AE%9E%E8%B7%B5%2F</url>
      <content type="text"><![CDATA[sublimetext-markdown实践 1. 所需插件 2. 具体实践 2.1 MarkdownEditing 2.2 Markdown Preview 2.3 Table Editor 2.4 MarkdownTOC 1. 所需插件SublimeText自带有markdown格式，但第三方插件提供了更多的选择，如支持GFM等。这里用到的的插件主要有MarkdownEditing、Markdown Preview、Table Editor 2. 具体实践2.1 MarkdownEditing一定要全局配置ignored_packages: [“Markdown”]禁用ST默认的Markdown插件，否则MarkdownEditing中看不到代码染色的效果，也不会有GFM的语法增强。 自动匹配星号（*）、下划线（_）及反引号（`），选中文本按下以上符号能自动在所选文本前后添加配对的符号，方便粗体、斜体和代码框的输入。 直接输入配对的符号后按下退格键（backspace），则两个符号都会被删除；直接输入配对的符号后按下空格键，则会自动删除后一个。 拷贝一个链接，选中文本后按下 ctrl+win+v 会自动插入内联链接。 shift+win+k 插入图片。 ctrl+1..6:插入相应级别的标题 alt+shift+6：插入脚注 ctrl+shift+pageup/pagedown:跳转到前/后一个标题 ctrl+alt+shift+pageup/pagedown:跳转到前/后一个同级标题 2.2 Markdown Preview 浏览器预览，可自定义快捷键（f6） 在最前面添加[TOC]可自动生成目录 需要开启代码染色、MathJax支持才能获得相应功能等。 123456789101112131415161718&#123; /* Sets the parser used for building markdown to HTML. */ &quot;parser&quot;: &quot;github&quot;, /* Enable or not mathjax support. */ &quot;enable_mathjax&quot;: true, &quot;enable_uml&quot;: true, &quot;enable_highlight&quot;: true, &quot;enabled_parsers&quot;: [&quot;github&quot;, &quot;markdown&quot;], &quot;github_mode&quot;: &quot;markdown&quot;, &quot;github_inject_header_ids&quot;: true, &quot;enable_autoreload&quot;: false, &quot;strip_yaml_front_matter&quot;: true, &quot;enabled_extensions&quot;: [ &quot;extra&quot;, &quot;github&quot;, &quot;codehilite(guess_lang=False,pygments_style=github)&quot; ]&#125; 尝试一下，在md文件中输入： $$x^{y^z}=(1+{\rm e}^x)^{-2xy^w}$$ 如果MathJax配置成功的话，就能看到数学公式: $$x^{y^z}=(1+{\rm e}^x)^{-2xy^w}$$ 行间公式 $$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$ 显示为 $$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$ 行内公式 \\(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\\) 显示为\(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\) 更加完整的MathJax语法请参考[官方文档](http://mathjax-chinese-doc.readthedocs.org/en/latest/start.html)。 2.3 Table Editor 通过Ctrl+Shift+P-&gt;Table Editor: Enable for current systax开启。 先输入标题行，回车后在第二行输入|-后，按tab键就将进入Table编辑模式。 表格必须与前面输入的文字之间有空行，否则表格会被当成普通文字渲染。 2.4 MarkdownTOC 在最前面点击工具&gt;MarkdownTOC&gt;insert TOC生成TOC目录（当前文件可见；上一个当前文件不显示，只在浏览器显示；） 在设置中禁用uri_encoding即可解决中文乱码 12345678910&#123; // 自动链接，可实时更新&quot;default_autolink&quot;: true,// 设置链接为圆括号&quot;default_bracket&quot;: &quot;round&quot;,// 显示层次无限&quot;default_depth&quot;: 0,// 避免中文乱码&quot;default_uri_encoding&quot;: false,&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Markdown语法]]></title>
      <url>%2F2017%2F05%2F29%2Fmarkdown%E8%AF%AD%E6%B3%95%2F</url>
      <content type="text"><![CDATA[Markdown语法 0. 缘起 1. 基本语法 1.0 反斜杠 1.1 标题 1.2 加粗和斜体 1.3 键盘按键 1.4 列表 1.5 链接和图片 1.6 数学公式 1.7 引用 1.8 代码 1.9 分割线 2. GitHub Flavored Markdown 2.1 下划线 2.2 删除线 2.3 语法高亮 2.4 task任务（未渲染成功 注意[]中间有空格） 2.5 添加表情（未成功 不要用中文冒号） 2.6 增强表格 0. 缘起断断续续尝试过Markdown写作，不过最后都没能坚持下来。最近在折腾SublimeText3，顺便折腾了一遍相关Markdown插件，又激起了再次尝试Markdown的想法。再加上此前折腾的托管在github上的博客，也顺理成章应该选择Markdown书写。 Markdown的特点： 专注写作内容：不再纠结字体、标题大小、行间距等等版式问题，专注于文章内容本身的编写。 代码语法高亮 插入数学公式：Markdown可借助MathJax实现（还没学..）。 文件占用空间小：.md因为是纯文本文件，所以很小巧。 由于是初学，现在感觉有些地方还不太方便。 插入图片不方便，本地图片发布到网络前要上传图床 LaTeX没学过，插入公式也感觉麻烦 表格插入也不方便 1. 基本语法1.0 反斜杠Markdown 支持在符号前面加上反斜杠来帮助插入普通的符号 1.1 标题从#到######表示h1到h6，如 # h1 ## h2 ### h3 #后不加空格也一样，但加空格是最标准的写法 1.2 加粗和斜体- 两个*或_之间的文字会变为斜体 - 两个**或__之间的文字会加粗 - 两个`之间的文字会强调 如 *斜体* _斜体_ **粗体** __粗体__ `强调` 显示效果如下： 斜体斜体 粗体粗体 强调 1.3 键盘按键在&lt;kbd&gt;和&lt;/kbd&gt;之间的字母会像键盘按键那样显示，例如&lt;kbd&gt;Ctrl&lt;/kbd&gt;显示效果如下： Ctrl 1.4 列表-、+、*都能表示列表 有序列表则在文字前加序号1. 2. 3. 要注意的是文字前要有1个空格，列表前后都要有空行，如下 * bullets can be `-`, `+`, or `*` * bullet list 1 * bullet list 2 * sub item 1 * sub item 2 1. bullet 1 2. bullet 2 bullets can be -, +, or * bullet list 1 bullet list 2 sub item 1 sub item 2 bullet 1 bullet 2 1.5 链接和图片图片、网址、章节引用的方法都类似，语法是：[显示文字](reference)。其中 reference 可以是：图片链接、网址链接、#章节标题。图片时最前面加一个！ 目前还不知道有什么方法能嵌入本地图片。 如 [雪球](http://xueqiu.com) [1.3 键盘按键](### 1.3 键盘按键) ![图片名](图片链接地址) 雪球1.3 键盘按键 1.6 数学公式latex公式 1.7 引用在引用的文字前加&gt; 即可，如 &gt; 这里是引用文字 效果如下 这里是引用文字 1.8 代码插入代码块只需要单地缩进 4 个空格或是 1 个制表符即可，即按下tab即可 需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。 如果引用的语句为多行，可以将123如`if a &lt; b: a = 1 else a = 2` if a &lt; b : a = 1 else a = 2 123 效果如下`if a &lt; b: a = 1 else a = 2` if a &lt; b : a = 1else a = 21234567891011121314151617181920212223242526272829303132333435363738394041424344### 1.9 分割线 在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。如 *** --- ___ * * * 效果如下：***---___* * * ## 2. GitHub Flavored Markdown参考[github官方文档](https://help.github.com/categories/writing-on-github/)GFM使用了[Linguist](https://github.com/github/linguist)进行语言检测和语法高亮，能为几乎各种语言渲染出漂亮的样式。### 2.1 下划线单词中如果有_的话，GFM会忽略，而不会变成斜体！例如，单词wow_great_stuff中的great不会变成斜体。### 2.2 删除线 文字放在一组~~之间即可，如 ~~删除线~~ 效果如下~~删除线~~### 2.3 语法高亮 可以在```之间敲入代码，并提示编程语言，例如python。 ```python if a &lt; 1: print(a) 效果如下： 12if a &lt; 1: print(a) 2.4 task任务（未渲染成功 注意[]中间有空格）将列表变成带勾选的任务列表(微测试成功)，嵌套列表 - [ ] task list - [ ] list systax required - [ ] normal ** formatting**, @mentions, #1234 refs - [ ] incomplete - [x] complete 效果如下 [ ] task list [ ] list systax required [ ] normal formatting,@mentions,#1234 refs [ ] incomplete [x] complete 2.5 添加表情（未成功 不要用中文冒号）GFM支持添加emoji表情,输入不同的符号码表示不同的表情 ：blush： ：joy： ：grinning： 效果 :blush::joy::grinning: 2.6 增强表格 竖线可以不对齐 可以定义表格中文字对齐方式 表格可以嵌入图片]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[sublimetext总结-Python]]></title>
      <url>%2F2017%2F05%2F29%2Fsublimetext%E6%80%BB%E7%BB%93-Python%2F</url>
      <content type="text"><![CDATA[常用快捷键（包括部分插件） 系统快捷键 插件快捷键(需要setting中配置) 插件 通用插件 Advanced New File Cndict chineseWordCounter HiveOpener Open URL PlainTasks Sidebar Enhancements SublimeEvernote SublimeTmpl git GitGutter Markdown插件 MarkdownEditing Markdown Preview MarkdownTOC Table Editor IDE插件 AlignTab Anaconda SublimeREPL Sublime Terminal SQLTools 常用快捷键（包括部分插件）系统快捷键 查找切换文件：ctrl+p 跳转标记：ctrl+r 左右分屏：alt+shift+2,恢复单页面ctrl+shift+1 上下分屏：alt+shift+8 选中当前行：ctrl+l，继续操作（等同于shift+↓）选择下一行 同时编辑多行：ctrl+shift+l 选中要编辑的多行文本，按下快捷键将在行尾出现光标，可同时编辑多行 多行编辑：shift+rightclick，向右选中对齐的多行进行编辑 从光标位置起向前选中一行或多行：shift+↑ 从光标位置起向后选中一行或多行：shift+↓ 删除当前行：ctrl+shift+k 就近选择相同项：ctrl+d把光标放在一个单词上，按下ctrl+d，将选择这个单词。一直按住ctrl且按D多次，将选择当前选中项的下一个匹配项。通过按住ctrl，再按D三次，将选择三个相同的文本。 选择当前文件所有匹配项: alt+f3 整行的上下移动: ctrl+shift+↑或 ctrl+shift+↓ 增加和减少缩进: ctrl+] 或 [ 大写和小写: 大写ctrl+k+u、小写ctrl+k+l 全屏模式：f11 无干扰模式：shift+f11复制当前行：ctrl+shift+d 插件快捷键(需要setting中配置) f1：sidebar；在chrome打开 f4：sublimeREPL；打开Python控制台（相当于命令行输入Python指令） f5：sublimeREPL：运行Python程序 f6：markdown preview；预览markdown f12:HiveOpener;打开收藏网址列表 ctrl+shift+m:sublimetmpl；以tmpl模板创建md文件出现问题：快捷键无反应 ctrl+shift+n：sublimetmpl；以tmpl模板创建py文件 ctrl+shift+t：terminal；打开控制台； ctrl+alt+y：cndict；中英文翻译；选中文本后按下快捷键翻译 ctrl+alt+r：anaconda；自动pep8格式化 ctrl+alt+n：advancedNewFile；快速创建文件 ctrl+alt+i:HiveOpener;添加/移除到打开列表 ctrl+alt+o:HiveOpener;显示打开列表 插件通用插件第三方插件基于相同的api创建，因此其设置基本相同。设置文件为json格式，基本内容如下： Settings Settings - Default Settings - User Default Settings包含了插件的所有可选设置并设置了默认值，User Settings 则提供了更改初始设置的入口。User Setings 的优先级高于Default Settings，因此当User Settings中包含了与Default Settings相同的选项时，将使用该设置而非默认设置。 Note: 插件设置应该在User Settings进行，避免因插件升级等造成设置文件丢失 Key Bindings Key Brindings - Default Key Brindings - User Key Brindings 即快捷键绑定，跟设置类似，但部分插件可能没有 Advanced New FileAdvanced New File用来快速创建文档，还可以同时创建文件夹和路径，如： ctrl+alt+n 创建新的文件。此时底部状态栏会出现输入框，在其中输入文件名或路径即可。如输入test.py，将在当前目录下创建test.py文件。输入myfolder/mysubfolder/test.py,则将在当前目录下创建myfolder文件夹、mysubfolder子文件夹和test.py文件。 ctrl+shift+alt+n 除了创建一个指定的文件夹外，还会自动在文件夹中创建init.py文件。如输入myfolder/test.py，此时myfolder中还包含了init.py文件 setting中可配置默认的文件路径、文件扩展名等 CndictChinese-English Bilingual Dictionary提供中英文翻译 选中单词后，ctrl+alt+y即调出有道翻译的界面； ctrl+alt+c为金山词霸 未成功 可自定义翻译的显示方式 chineseWordCounterchineseWordCounter 中文汉字、英文单词等字数统计，参照LaTeX Word Count（不支持中文） HiveOpenerHiveOpener快速打开网址、文件、文件夹等，可当做收藏夹使用 ctrl+alt+i:HiveOpener;添加/移除到打开列表 ctrl+alt+o:HiveOpener;显示打开列表 Open URLOpen URL 可快速打开网址、文件夹、文件等 选中文本后，右键open url，可智能判断是打开网页或者google所选择的文本 PlainTasksPlainTasks 强大的to-do应用，基本上能想到的功能都有了 Sidebar EnhancementsSidebar Enhancements给侧边栏增加了很多有用的功能，如更改delete行为为（移到垃圾箱）open with、剪切板等。 基本功能：新建文件/文件夹，编辑，打开/运行，查找/高级查找，剪切，复制，粘贴，删除等 高级功能：copy paths as URIs, URLs, content as UTF8等 Note:可设置状态栏显示”file modified date” 和 “file size” SublimeEvernoteSublimeEvernote evernote插件，需要获取印象笔记api token SublimeTmplSublimeTmpl用于创建文件模板 setting中attr字段可自定义插入信息,形如 “attr”: { &quot;author&quot;: &quot;Your Name&quot; , &quot;email&quot;: &quot;you@example.org&quot;, &quot;link&quot;: &quot;http://example.org&quot;, &quot;hello&quot;: &quot;word&quot; } 支持自动插入日期 支持自动插入 保存文件名未成功 gitgit包含了基本的git操作，init,clone,add,commit,push,pull等 ctrl+shift+p后输入git进行操作 GitGutterGitGutter 可以很清楚显示出对文件所作出做出的改动 Markdown插件MarkdownEditingMarkdownEditing 自动匹配星号（*）、下划线（_）及反引号（`），选中文本按下以上符号能自动在所选文本前后添加配对的符号，方便粗体、斜体和代码框的输入。 直接输入配对的符号后按下退格键（backspace），则两个符号都会被删除；直接输入配对的符号后按下空格键，则会自动删除后一个。 拷贝一个链接，选中文本后按下 ctrl+win+v 会自动插入内联链接。 shift+win+k 插入图片。 ctrl+1..6:插入相应级别的标题 alt+shift+6：插入脚注 ctrl+shift+pageup/pagedown:跳转到前/后一个标题 ctrl+alt+shift+pageup/pagedown:跳转到前/后一个同级标题 Markdown PreviewMarkdown Preview可输出html文件及在浏览器预览 浏览器预览，可自定义快捷键（f6） 在最前面添加[TOC]可自动生成目录 MarkdownTOCMarkdownTOC用于生成目录 在最前面点击工具&gt;MarkdownTOC&gt;insert TOC生成TOC目录（当前文件可见；上一个当前文件不显示，只在浏览器显示；） 在设置中禁用uri_encoding即可解决中文乱码 Table EditorTable Editor 很方便的markdown表格编辑工具 IDE插件AlignTabAlignTab用于快速对齐文本 简单版：选中需要对齐的文本，右键选择Align By即可根据:=&amp;等进行对齐 高级应用：采用正则表达式进行对齐 表格编辑中可用 Note：中文支持问题：右键不可用，ctrl+shift+p调出菜单后输入对应的全角符号 AnacondaAnaconda 完美的Python IDE，此外也有Go，Rust，PHP版本 集合了众多Python插件，包括jedi/autopep8/PyFlakes等 代码补全、错误提示、进行调试等 .补全（方法等补全）需要设置 “auto_complete_triggers”:[{“selector”: “source.python - string - comment - constant.numeric”, “characters”: “.”}] ctrl+alt+r:自动规范为pep格式 可配置python及外部库位置，自定义需要忽略的pep8规范等 SublimeREPLSublimeREPL交互式运行程序 提供交互式终端，如Python中input()自带编译系统无法输入文本 历史记录功能等 Sublime TerminalSublime Terminal 在sublime中打开终端 ctrl+shift+t 可设置打开的终端，如powershell，cmder SQLToolsSQLTools sql工具，支持mysql,PostgreSQL,oracle,sqlite3等]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[test]]></title>
      <url>%2F2017%2F03%2F28%2Ftest%2F</url>
      <content type="text"><![CDATA[this is a test file this is heading 1this is heading 2this is heading 2this is heading 1this is heading 2]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[程序设计入门-Python]]></title>
      <url>%2F2017%2F03%2F26%2F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8-Python%2F</url>
      <content type="text"><![CDATA[本文是网易云课堂中程序设计入门-Python的课程笔记。 数据类型、运算符、变量赋值和简单I/O操作对象与类型五种基本对象类型 字符串，str 使用单引号、双引号、三引号括起来的一连串字符。 整数，int 支持十进制（21），八进制（025）和十六进制（0x15） 浮点数，float 1.48, 21.0， 21.， .21, 2.1E-2 布尔类型，bool True，False 对象类型 type（） $1+2 3 $’1’ + ‘2’ ‘12’ $1.1 + 1.1 2.2 $1.1+1.1+1.1 3.30000000000000003(浮点数3.3无法在电脑中精确表示，有一定精度损失) 算术运算 算术运算符 含义 举例 / 除法运算 10/2=5.0；10/3=3.333335 % 求余数 10%3=1 // 求商运算 10//3=3 ** 指数运算 2**3=8 **python2中“/“表示向下取整，因此5/9=0,需要写为5./9才对，python3则是表示正常除。 自动类型转换参与运算的两个对象类型不同时，按照以下规则自动转换 *bool→int→float→complex 如：1.0+3=4.0；True+3.0=4.0 求余运算应用今天是周六，10天之后是周几？ （6+10）%7=2 x是否为偶数 if (x % 2 == 0) math模块import math #引入math模块 dir(math) #列出math中的内容 help（math.sin) #帮助 math.pi math.e 关系运算符x % 2 == 0 #等于 x % 2 != 0 逻辑运算符 关系运算符 含义 举例 and 与 True and False == False or 或 True or False == True not 非 not True == False 港台女明星 性别 == 女 and （籍贯 == 香港 or 籍贯 == 台湾） 判断闰年 年份能被4整除不能被100整除，或者能被400整除，则是闰年 （y % 4 == 0 and y % 100 != 0) or (y % 400 == 0) 运算符优先级​ 变量与I/O变量，Variable增量赋值运算符 累加 123count = count + 1# 简写为：count += 1 | 增量赋值 | 等价表示 || ——- | :———- || x += 2 | x = x + 2 || x -= 2 | x = x - 2 || x = 2 | x = x 2 || x /= 2 | x = x / 2 || x %= 2 | x = x % 2 || x = 2 | x = x 2 | 输入与输出input函数 12345import mathradius = float(input(‘Radius：’))area = math.pi * radius ** 2print('Area:', area) print函数 输出到多行 1print（'hello\nworld!') 课程练习 输入2 2 3时的结果为： 256 解释： 是幂运算，优先级是右结合，即多次幂运算先递归计算右边的结果: a b c = a ( b ** c) 输入 123 and 456 的结果为： 456 解释：逻辑运算是左结合的运算符；and 找假，找不到假返回最后一个真，or 找真，找到真的立刻给出真 因此， 123 or 456 结果为123 7.0 % 5 的结果为： 2.0 解释：%为求余运算 使用 format 函数设置保留两位小数： num = 1 / 30‘{0:.2f}’.format(num) ‘0.33’‘%.2f’ % (num) ‘0.33’format(num, ‘.2f’) ‘0.33’ 程序控制结构 选择结构程序流程图if语句123456score = 70if score &gt; 60: print('yes')else: print('no') 123456score = 70gender = 'lady'if score &gt; 60: if gender == 'lady': print('yes') 12345score = 70gender = 'lady'if score &gt; 60 and gender = 'lady': print('yes') 123456789score = 70gender = 'lady'if score &gt; 80: print('A')elif score &gt; 70: print('B')else: print('C') 一元二次方程求解123456789101112131415161718192021import matha = float(input('a:'))b = float(input('b:'))c = float(input('c:'))if a == 0: if b != 0: print('solution is:', -c/b) elif c == 0: print('x is any num') else: print('no solution')else: if b**2-4*a*c &lt; 0: print('no solution') elif b**2-4*a*c == 0: print('solution is:', -b/2/a) else: delta = math.sqrt(b**2-4*a*c) print('solution is:', (-b-delta)/a/2,(-b+delta)/a/2) 篮球比赛领先多少才安全123456789101112131415161718score = int(input(&apos;forward score:&apos;))score -= 3has_ball = input(&apos;has ball(0/1);&apos;)time_remaining = float(input(&apos;time remmaining:&apos;))if has_ball == &apos;1&apos;: score += 0.5else: score -= 0.5if score &lt; 0: score = 0score **= 2if score &gt; time_remaining: print(&apos;safe&apos;)else: print(&apos;not safe&apos;) 循环结构while循环语句 多次求一元二次方程 分析策略： 循环体外设定循环可执行的初始条件 书写需重复执行的代码（循环体） 设定循环条件并在循环体内设定条件改变语句 打印字符串5次 1234count = 0while count &lt; 5: print('hello world') 计算1+2+…+10 12345678i = 1s = 0while i &lt;= 10: s += i i += 1print(s) 多次求解一元二次方程 1234567891011121314151617181920212223import mathch = ''while ch != 'q': a = float(input('a:')) b = float(input('b:')) c = float(input('c:')) if a == 0: if b != 0: print('solution is:', -c/b) elif c == 0: print('x is any num') else: print('no solution') else: if b**2-4*a*c &lt; 0: print('no solution') elif b**2-4*a*c == 0: print('solution is:', -b/2/a) else: delta = math.sqrt(b**2-4*a*c) print('solution is:', (-b-delta)/a/2,(-b+delta)/a/2) ch = input('enter q to exit:') for循环计算1+2+3+…10 123456s = 0for i in range(1, 11, 1): s += i print(s) 计算常数e 12345678import mathe = 1for i in range(1, 100): e += 1/math.factorial(i)print(e) 12345678# 另一种算法，避免每次从1开始计算阶乘，可有效提升速度e = 1factorial = 1for i in range(1, 100): factorial *= i e += 1/factorialprint(e) 求常数π 123456pi = 0for i in range(1, 100000): pi += (-1)**(i+1)/(2*i-1)pi *= 4print(pi) 1234567891011# 该算法同样速度更快pi = 0sign = 1divisor = 2for i in range(1, 100000): pi += 4 * sign /divisor sign *= -1 divisor += 2print(pi) 奇偶归一猜想 对于每一个正整数，如果它为奇数，则对其乘3加1，如果为偶数，则对其除以2，如此循环，最后都能够得到1 12345678for n in range(1,100): while n != 1: if n % 2 == 0: n /= 2 else: n = n * 3 + 1 # print(n) print(n, end=' ') # 输出不换行 九九乘法表 12345for i in range(1, 10): for j in range(1, 10): # print(i * j, end =' ') print(format(i * j, '3d'), end=' ') #每个数字占3格，以整数形式输出，'3d'此处等同'3' print() 鸡兔同笼（穷举法） 鸡兔同笼，35头，94足 12345for chickens in range(35+1): for rabbits in range(35+1): if 2 * chickens + 4 * rabbits == 94 and chickens + rabbits == 35: print('chickens numbers:', chickens) print('rabbits numbers:', rabbits) while vs. for 循环 while循环更通用 任何for循环都可以用while来实现 for循环适用于已知循环范围（range），即起始值和步长 其他情况均使用while循环，如：不确定循环何时终止 编程练习二分法求平方根： 基本思想 猜测一个平方根（x/2) 如果猜小了，则正确平方根在猜测数字和原数字之间 如果猜大了，则在0和猜测数字之间 算法描述 input:x output:√x low = 0, high = x guess = (low + high) / 2 如果$guess^2 == x$, 则输出guess，程序结束 $如果guess^2 &lt; x , 则输出low = guess；继续步骤2$ 如果$guess^2 &gt; x$，则输出 $high = guess$;继续步骤2 1234567891011121314x = float(input('enter a number:'))low = 0high = xguess = (low + high) / 2while abs(guess ** 2 - x) &gt; 1e-5: if guess ** 2 &lt; x: low = guess else: high = guess guess = (high + low) / 2print('root of x is:', guess) 对于上面的程序，当x&lt;0或x&lt;1时将不成立 12345678910111213141516171819202122232425262728x = float(input('enter a number:'))if x &lt; 0: print('no root')elif x &lt; 1: low = x high = 1 guess = (low + high) / 2 while abs(guess ** 2 - x) &gt;1e-6: if guess ** 2 &gt; x: high = guess else: low = guess guess = (high + low) / 2 print('root of x is:', guess)else: low = 0 high = x guess = (low + high) / 2 while abs(guess ** 2 - x) &gt; 1e-6: if guess ** 2 &lt; x: low = guess else: high = guess guess = (high + low) / 2 print('root of x is:', guess) 判断素数根据基本定义判断 12345678n = int(input('enter a int number:'))for i in range(2, n): if n % i == 0: print('not a prime') break else: print('is a prime') 上面的程序是素数时每次不被整除都会输出 12345678n = int(input('enter a int number:'))for i in range(2, n): if n % i == 0: print(n, 'not a prime') breakelse: print(n, 'is a prime') 另一种算法：无需判断所有的range(2, x)都不能整除x，只需要判断 range(2, int(math.sqrt(x) + 1)) 即可 1. 对于任意一个合数x，假设它有两个质因子a、b（a&lt;=b），显然x = a*b。 2. 由不等式性质可得，a &lt;= sqrt(x)， 即 a &lt;= x^(1/2)。 3. 因此，判断一个数是不是合数，只需要判断到 int（sqrt(x)）即可找到是否有质因子存在，for循环中再+1 1234567891011121314151617# 可以通过缩小范围加快速度print('2 is a prime')count = 1for n in range(3, 500, 2): if n % 2 == 0: continue # print(n, 'not a prime') else: for i in range(3, n - 1, 2): if n % i == 0: #print(n, 'not a prime') break else: print(n, 'is a prime') count += 1 if count == 50: break 1234567891011121314# 算法import mathcount = 0num = 2while count &lt; 50: for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: break else: print(num) count += 1 num += 1 回文数 求 n的逆序n‘； 如果n == n’，则为回文数 1234567#### 转化为字符串问题n = input('enter a number:')n_new = n[::-1]if n == n_new: print('yes')else: print('no') 123456789101112#### 一般解法num = int(input('enter a number:'))num_temp = numnum_prime = 0while num_temp != 0: num_prime = num_prime * 10 + num_temp % 10 #余数留给新的数字，并每次乘以10 num_temp //= 10 # 原来数字每次向右移动一位，123→12if num == num_prime: print('yes')else: print('no') tips：x = a if a &gt; b else b]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F08%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
